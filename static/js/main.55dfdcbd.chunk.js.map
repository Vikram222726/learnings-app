{"version":3,"sources":["components/form.jsx","App.js","reportWebVitals.js","index.js"],"names":["Form","finalName","finalEmail","finalInterest","useState","name","setName","email","setEmail","interest","setInterest","errorName","setErrorName","errorEmail","setErrorEmail","errorInterest","setErrorInterest","items","setItems","success","setSuccess","details","setDetails","finalPost","a","fetch","method","headers","body","JSON","stringify","result","console","log","getData","e","axios","get","newData","arr","data","results","num","number","newItems","i","label","value","undefined","className","action","htmlFor","type","onChange","target","autoComplete","id","isMulti","onInputChange","length","Array","isArray","map","x","placeholder","options","onClick","f","f1","f2","newDetails","postData","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55dfdcbd.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport Select from 'react-select';\r\nimport axios from 'axios';\r\n\r\nconst Form = () =>{\r\n\r\n    const [name,setName] = useState(\"\");\r\n    const [email,setEmail] = useState(\"\");\r\n    const [interest,setInterest] = useState([]);\r\n    const [errorName,setErrorName] = useState(\"\");\r\n    const [errorEmail,setErrorEmail] = useState(\"\");\r\n    const [errorInterest,setErrorInterest] = useState(\"\");\r\n    const [items,setItems] = useState([]);\r\n    const [success,setSuccess] = useState(\"\");\r\n    const [details,setDetails] = useState(\"\");\r\n    let finalName,finalEmail,finalInterest;\r\n\r\n    const finalPost = async () => {\r\n        try{\r\n            let result = await fetch('https://testpostapi1.p.rapidapi.com/testBatmanApi/name/register',{\r\n                method: 'post',\r\n                // mode: 'no-cors',\r\n                headers: {\r\n                    'accept': 'success',\r\n                    'content-type': 'application/x-www-form-urlencoded',\r\n                    'x-rapidapi-host': 'testpostapi1.p.rapidapi.com',\r\n                    'x-rapidapi-key': '28728db04dmsh34d3f140dd059fap1c388ejsn7288577afcf7'\r\n                },\r\n                body: JSON.stringify({\r\n                    'name': `${finalName}`,\r\n                    'email': `${finalEmail}`,\r\n                    'interests': `${finalInterest}`\r\n                })\r\n            });\r\n            console.log(result);\r\n        }catch(e){\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    const postData = () =>{\r\n        console.log(\"hey\");\r\n        setSuccess(\"Congrats! You are successfully Registered..\");\r\n        const newDetails = `Name:${name}  Email:${email}  Interests:${interest}`;\r\n        setDetails(newDetails);\r\n        finalName = name; finalEmail = email; finalInterest = interest;\r\n        setName(\"\"); setEmail(\"\"); setInterest([]); setItems([]);\r\n        finalPost();\r\n    }\r\n\r\n    const validate = () =>{\r\n        let f=0,i=name.length,f1=-1,f2=-1;\r\n        while(i--){\r\n            if(name[i] >= '0' && name[i] <='9'){ f=1; break;}\r\n            if(name[i] === '!' || name[i]==='@' || name[i]==='#' || name[i]==='$'){ f=1; break;}\r\n        }\r\n        i=email.length;\r\n        while(i--){\r\n            if(email[i] === '@'){ f1=i;}\r\n            if(email[i] === '.'){ f2=i;}\r\n        }\r\n        if(name === \"\"){\r\n            setErrorName(\"Please Enter your Name..\");\r\n            return;\r\n        }else if(name.length === 1){\r\n            setErrorName(\"There must be more than 1 character..\"); return;\r\n        }else if(f === 1){\r\n            setErrorName(\"This Field only contains characters..\"); return;\r\n        }else{\r\n            setErrorName(\"\");\r\n        }\r\n        if(email === \"\"){\r\n            setErrorEmail(\"Please Enter Your Email Id..\"); return;\r\n        }else if(email.length < 6 || f1 === -1 || f2 === -1 || (f1>f2)){\r\n            setErrorEmail(\"Invalid Email..\"); return;\r\n        }else if(f1+1 === f2){\r\n            setErrorEmail(\"There must be a char between @ and .\"); return;\r\n        }\r\n        else{ setErrorEmail(\"\");}\r\n        if(interest.length === 0){\r\n            setErrorInterest(\"Select Your Interests..\"); return;\r\n        }else{\r\n            setErrorInterest(\"\");\r\n        }\r\n        postData();\r\n    }\r\n\r\n    const handleName = (e) => {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    const handleEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    }\r\n\r\n    const handleSelect = (e) => {\r\n        setInterest(Array.isArray(e) ? e.map(x => x.label) : []);\r\n    }\r\n\r\n    const getData = async (e) => {\r\n        const newData = await axios.get(`https://webit-keyword-search.p.rapidapi.com/autosuggest?q=${e}&language=en&rapidapi-key=28728db04dmsh34d3f140dd059fap1c388ejsn7288577afcf7`);\r\n        const arr = newData.data.data.results;\r\n        const num = newData.data.data.number;\r\n        const newItems = [];\r\n        for(let i=0;i<num;i++){\r\n            newItems[i] = {label:arr[i], value:i+1};\r\n        }\r\n        if(newItems[0].label === undefined){\r\n            setItems([]);\r\n        }else{\r\n            setItems(newItems);\r\n        }\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        if(e.length >= 2){\r\n            getData(e);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <div className=\"success\">{success}</div>\r\n            <form action=\"\" className=\"form\">\r\n                <div>\r\n                    <label htmlFor=\"username\" className=\"labels\">Name</label>\r\n                    <div className=\"chkerr\">{errorName}</div>\r\n                    <div><input type=\"text\" className=\"textbx\" value={name} onChange={handleName} autoComplete=\"off\" name=\"username\" id=\"username\" /></div>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"email\" className=\"labels\">Email</label>\r\n                    <div className=\"chkerr\">{errorEmail}</div>\r\n                    <div><input type=\"email\" className=\"textbx\" value={email} onChange={handleEmail} autoComplete=\"off\" name=\"email\" id=\"email\" /></div>\r\n                </div>\r\n                <div>\r\n                    <label htmlFor=\"interest\" className=\"labels\">Interests</label>\r\n                    <div className=\"chkerr\">{errorInterest}</div>\r\n                    <Select isMulti className=\"textbx select\" onInputChange={handleChange} onChange={handleSelect} placeholder=\"select almost 3 items..\" options={items} />\r\n                </div>\r\n                <div>\r\n                    <button type=\"button\" onClick={validate} className=\"btn btn-primary button\">Register</button>\r\n                </div>\r\n            </form>\r\n            <div className=\"details\">{details}</div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form;","import \"./App.css\";\nimport Form from \"./components/form\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\n//28728db04dmsh34d3f140dd059fap1c388ejsn7288577afcf7\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}